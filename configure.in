#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.67])
AC_INIT([voipmonitor], [VERSION], [support@voipmonitor.org])
AC_CONFIG_SRCDIR([voipmonitor.cpp])
AC_CONFIG_HEADERS([config.h])

AC_ARG_WITH([siptls], [AS_HELP_STRING([--without-siptls], [disable support for siptls])], [], [with_siptls=yes])
AC_ARG_WITH([skinny], [AS_HELP_STRING([--without-skinny], [disable support for skinny])], [], [with_skinny=yes])
AC_ARG_WITH([tar], [AS_HELP_STRING([--without-tar], [disable support for tar])], [], [with_tar=yes])
AC_ARG_WITH([fraud], [AS_HELP_STRING([--without-fraud], [disable support for fraud detection])], [], [with_fraud=yes])
AC_ARG_WITH([spool], [AS_HELP_STRING([--without-spool], [disable support spool directory])], [], [with_spool=yes])
AC_ARG_WITH([manager], [AS_HELP_STRING([--without-manager], [disable manager support])], [], [with_manager=yes])
AC_ARG_WITH([mysql], [AS_HELP_STRING([--without-mysql], [disable MySQL])], [], [with_mysql=yes])
AC_ARG_WITH([heapsafe], [AS_HELP_STRING([--without-heapsafe], [disable safe heap checking])], [], [with_heapsafe=yes])

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_MAKE_SET

LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib"
LDFLAGS="$LDFLAGS -L/usr/local/lib"

# Checks for libraries.
# FIXME: Replace `main' with a function in `-lc':
AC_CHECK_LIB([c], [main])
# FIXME: Replace `main' with a function in `-lcrypt':
AC_CHECK_LIB([crypt], [main])
# FIXME: Replace `main' with a function in `-ldl':
AC_CHECK_LIB([dl], [main], AC_SUBST([LIBLD],["-ldl"]), AC_MSG_NOTICE([Unable to find libdl. Safe to ignore on FreeBSD as the functionality is provided by libc.]))
# FIXME: Replace `main' with a function in `-lltdl':
AC_CHECK_LIB([ltdl], [main])
# FIXME: Replace `main' with a function in `-lm':
AC_CHECK_LIB([m], [main])
# check for pcap
AC_CHECK_LIB([pcap], [main], ,AC_MSG_ERROR([Unable to find libpcap library. Debian: apt-get install libpcap-dev. Centos/Redhat: yum install libpcap-devel]))
# FIXME: Replace `main' with a function in `-lpthread':
AC_CHECK_LIB([pthread], [main])
# FIXME: Replace `main' with a function in `-lrt':
AC_CHECK_LIB([rt], [main])
# FIXME: Replace `main' with a function in `-lssl':
#AC_CHECK_LIB([ssl], [main])
# Check for ODBC, unless explicitly disabled.
AC_ARG_WITH([odbc],
            [AS_HELP_STRING([--without-odbc],
              [disable support for odbc])],
            [],
            [with_odbc=yes])
LIBODBC=
AS_IF([test "x$with_odbc" != xno],
      [AC_CHECK_LIB([odbc], [SQLAllocHandle],
         [AC_SUBST([LIBODBC], ["-lodbc"])
               AC_DEFINE([HAVE_LIBODBC], [1], [Define if you have libodbc])
               HAVE_LIBODBC_T=yes
         ],
         [AC_MSG_FAILURE(
               [Unable to find odbc library. Debian: apt-get install unixodbc-dev. Centos/Redhat: yum install unixODBC-devel, --without-odbc to disable])
         ])
       ],
       HAVE_LIBODBC_T=no
     )

# Check for oggvorbis, unless explicitly disabled.
AC_ARG_WITH([oggvorbis],
            [AS_HELP_STRING([--without-oggvorbis],
              [disable support for ogg vorbis])],
            [],
            [with_oggvorbis=yes])
LIBOGG=
AS_IF([test "x$with_oggvorbis" != xno],
      [AC_CHECK_LIB([ogg], [ogg_stream_init], [ HAVE_LIBOGG_T=yes ],
         [AC_MSG_FAILURE(
               [Unable to find OGG library. Debian: apt-get install libogg-dev. Centos/Redhat: yum install libogg-devel, --without-ogg to disable])
         ])
       ],
       HAVE_LIBOGG_T=no
     )
LIBVORBIS=
AS_IF([test "x$with_oggvorbis" != xno],
      [AC_CHECK_LIB([vorbis], [vorbis_comment_init], [ HAVE_LIBVORBIS_T=yes ],
         [AC_MSG_FAILURE(
               [Unable to find VORBIS library. Debian: apt-get install libvorbis-dev. Centos/Redhat: yum install libvorbis-devel])
         ])
       ],
       HAVE_LIBVORBIS_T=no
     )
LIBVORBISENC=
AS_IF([test "x$with_oggvorbis" != xno],
      [AC_CHECK_LIB([vorbisenc], [vorbis_encode_init], [ HAVE_LIBVORBISENC_T=yes ],
         [AC_MSG_FAILURE(
               [Unable to find VORBIS library. Debian: apt-get install libvorbis-dev. Centos/Redhat: yum install libvorbis-devel])
         ])
       ],
       HAVE_LIBVORBISENC_T=no
     )

if test "$HAVE_LIBOGG_T" = "yes" -a "$HAVE_LIBVORBIS_T" = "yes" -a "$HAVE_LIBVORBISENC_T" = "yes" 
then
  AC_SUBST([LIBOGGVORBIS], ["-logg -lvorbis -lvorbisenc"])
  AC_DEFINE([HAVE_LIBOGGVORBIS], [1], [Define if you have liboggvorbis])
  HAVE_LIBOGGVORBIS_T=yes
else
  HAVE_LIBOGGVORBIS_T=no
fi

# Check for snappy library
AC_ARG_WITH([snappy],
            [AS_HELP_STRING([--without-snappy],
              [disable support for snappy])],
            [],
            [with_snappy=yes])
LIBSNAPPY=
AS_IF([test "x$with_snappy" != xno],
      [AC_CHECK_LIB([snappy], [_ZN6snappy11RawCompressEPKcmPcPm],
         [AC_SUBST([LIBSNAPPY], ["-lsnappy"])
               AC_DEFINE([HAVE_LIBSNAPPY], [1], [Define if you have libsnappy])
               HAVE_LIBSNAPPY_T=yes
         ],
         [AC_MSG_FAILURE(
               [Unable to find snappy library. apt-get install libsnappy-dev | or compile from source: https://snappy.googlecode.com/files/snappy-1.1.0.tar.gz])
         ])
       ],
       HAVE_LIBSNAPPY_T=no
     )

AC_CHECK_LIB([curl], [main], , AC_MSG_ERROR([Unable to find curl library. apt-get libcurl4-openssl-dev | yum curl-devel]))

# Check for libssh
AC_ARG_WITH([ssh],
            [AS_HELP_STRING([--without-ssh],
              [disable support for ssh])],
            [],
            [with_ssh=yes])
LIBSSH=
AS_IF([test "x$with_ssh" != xno],
      [AC_CHECK_LIB([ssh], [ssh_options_set],
         [AC_SUBST([LIBSSH], ["-lssh -lssh_threads"])
               AC_DEFINE([HAVE_LIBSSH], [1], [Define if you have libssh])
               HAVE_LIBSSH_T=yes
         ],
         [AC_MSG_FAILURE(
               [Your libssh is old or missing - cloud feature is disabled. apt-get install libssh-dev | yum install libssh-devel | or compile from source https://red.libssh.org/projects/libssh/files])
         ])
       ],
       HAVE_LIBSSH_T=no
     )

AC_CHECK_LIB([json], [main], LIBJSON_NAME='json')
AC_CHECK_LIB([json-c], [main], LIBJSON_NAME='json-c')
if test "x$LIBJSON_NAME" = "x"; then
	AC_MSG_ERROR([Unable to find json(-c) library. apt-get install libjson0-dev | yum install json-c-devel (RPM from EPEL) | pkg install json-c | or compile from source: git clone https://github.com/json-c/json-c.git; cd json-c; sh autogen.sh; ./configure; make; make install;ldconfig])
else
	AC_SUBST([LIBJSON_NAME],["$LIBJSON_NAME"])
fi

# Check for librrd
AC_ARG_WITH([rrd],
            [AS_HELP_STRING([--without-rrd],
              [disable support for rrd])],
            [],
            [with_rrd=yes])
LIBRRD=
AS_IF([test "x$with_rrd" != xno],
      [AC_CHECK_LIB([rrd], [rrd_init],
         [AC_SUBST([LIBRRD], ["-lrrd -lrrd_th"])
               AC_DEFINE([HAVE_LIBRRD], [1], [Define if you have librrd])
               HAVE_LIBRRD_T=yes
         ],
         [AC_MSG_FAILURE(
               [Unable to find librrd library. apt-get install librrd-dev | yum install rrdtool-devel | or compile from source http://oss.oetiker.ch/rrdtool/doc/librrd.en.html, or specify --without-rrd])
         ])
       ],
       HAVE_LIBRRD_T=no
     )

# Check for gnutls
AS_IF([test "x$with_siptls" != xno],
      [AC_CHECK_LIB([gnutls], [gnutls_init], [ HAVE_LIBGNUTLS=1 ],
         [AC_MSG_FAILURE(
               [Unable to find gnutls disabling SIP TLS decoder. apt-get install libgnutls-dev | yum install gnutls-devel])
         ])
       ]
     )

# Check for glib2
LIBGLIB=
AS_IF([test "x$with_siptls" != xno],
      [AC_CHECK_LIB([glib-2.0], [glib_check_version], [ HAVE_LIBGLIB=1 ],
         [AC_MSG_FAILURE(
               [Unable to find glib disabling SIP TLS decoder. apt-get install libglib2.0-dev | yum install glib2-devel])
         ])
       ]
     )

HAVE_SIPTLS_T=no
if test "x$HAVE_LIBGNUTLS" = "x1" -a "x$HAVE_LIBGLIB" = "x1" ; then
          AC_DEFINE([HAVE_LIBGNUTLS], [1], [Define if you have libgnutls])
          AC_SUBST([LIBGNUTLS], ["-lgnutls"])
	  AC_SUBST([LIBGNUTLSSTATIC],["-lgcrypt -lgnutls -lnettle -lhogweed -lgmp -lgpg-error -lpthread "])
          AC_DEFINE([HAVE_LIBGLIB], [1], [Define if you have libglib])
          AC_SUBST([GLIBCFLAGS], [`pkg-config --cflags glib-2.0`])
          AC_SUBST([GLIBLIB], [`pkg-config --libs glib-2.0`])
          HAVE_SIPTLS_T=yes
fi

# Check for MySQL libraries (or MariaDB)
AC_ARG_WITH(mysql, [  --with-mysql=PATH path to mysql_config binary or mysql prefix dir], [
	if test -x $withval -a -f $withval
	then
		MYSQL_CONFIG=$withval
	elif test -x $withval/bin/mysql_config -a -f $withval/bin/mysql_config
	then
		MYSQL_CONFIG=$withval/bin/mysql_config
	fi
], [
	if test "x$without_mysql" == xyes ; then
		MYSQL_CONFIG=""
	elif test -x /usr/local/mysql/bin/mysql_config -a -f /usr/local/mysql/bin/mysql_config
	then
		MYSQL_CONFIG=/usr/local/mysql/bin/mysql_config
	elif test -x /usr/bin/mysql_config -a -f /usr/bin/mysql_config
	then
		MYSQL_CONFIG=/usr/bin/mysql_config
	elif test -x /usr/local/bin/mysql_config -a -f /usr/local/bin/mysql_config
	then
		MYSQL_CONFIG=/usr/local/bin/mysql_config
	fi
])
if test "x$MYSQL_CONFIG" = "x"
then
    if test "x$with_mysql" == xno ; then
        ENABLE_MYSQL_T=no
    else
        AC_MSG_RESULT(not found)
       exit 3
    fi
else
    AC_DEFINE([ENABLE_MYSQL], [1], [Define if you want MySQL])
    AC_SUBST([MYSQLCFLAGS],[`$MYSQL_CONFIG --cflags`])
    AC_SUBST([MYSQLCXXFLAGS],[`$MYSQL_CONFIG --cxxflags`])
    MYSQLLDFLAGS=`$MYSQL_CONFIG --libs`
    LDFLAGS="$LDFLAGS $MYSQLLDFLAGS"
    AC_SUBST([MYSQLLIB],[$MYSQLLDFLAGS])
    AC_SUBST([MYSQLINCLUDE],[`$MYSQL_CONFIG --include`])
    AC_MSG_RESULT($MYSQL_CONFIG)
    ENABLE_MYSQL_T=yes
fi
if test "$ENABLE_MYSQL_T" != "no" ; then
  AC_CHECK_LIB([mysqlclient], [main], , AC_MSG_ERROR([Unable to find libmysqlclient. apt-get install libmysqlclient-dev | yum install mysql-devel | pkg install mysql56-client]))
fi

AC_CHECK_LIB([z], [main], , AC_MSG_ERROR([Unable to find libz. apt-get install zlib1g-dev | yum install zlib-devel]))

# Check for liblzma
AS_IF([test "x$with_liblzma" != xno],
      [AC_CHECK_LIB([lzma], [lzma_code], [ HAVE_LIBLZMA=1 ],
         [AC_MSG_FAILURE(
               [Unable to find lzma. apt-get install liblzma-dev | yum install lzma-devel])
         ])
       ]
     )

#AC_CHECK_LIB([tcmalloc_minimal], [tc_malloc], HAVE_LIBTCMALLOC=1, AC_MSG_NOTICE([Unable to find tcmalloc_minimal library which speeds up threads by 10%. The library is optional: apt-get install libtcmalloc-minimal4 or compile from source https://code.google.com/p/gperftools/]))

HAVE_LIBLZMA_T=no
if test "x$HAVE_LIBLZMA" = "x1"; then 
	AC_DEFINE([HAVE_LIBLZMA], [1], [Define if using liblzma])
	AC_SUBST([LIBLZMA],["-llzma"])
	HAVE_LIBLZMA_T=yes
fi

TCMALLOC_T=no
if test "x$HAVE_LIBTCMALLOC" = "x1"; then 
	AC_DEFINE([HAVE_LIBTCMALLOC], [1], [Define if using libtcmalloc])
	AC_SUBST([LIBTCMALLOC],["-ltcmalloc_minimal"])
	TCMALLOC_T=yes
fi

# Checks for header files.
#AC_FUNC_ALLOCA
#AC_CHECK_HEADERS([arpa/inet.h fcntl.h inttypes.h limits.h locale.h malloc.h netdb.h netinet/in.h stddef.h stdint.h stdlib.h string.h strings.h sys/param.h sys/socket.h sys/time.h syslog.h unistd.h wchar.h])

# Checks for typedefs, structures, and compiler characteristics.
#AC_HEADER_STDBOOL
#AC_C_INLINE
#AC_TYPE_INT16_T
#AC_TYPE_INT32_T
#AC_TYPE_INT64_T
#AC_TYPE_MODE_T
#AC_TYPE_OFF_T
#AC_TYPE_PID_T
#AC_TYPE_SIZE_T
#AC_TYPE_UINT16_T
#AC_TYPE_UINT32_T
#AC_TYPE_UINT64_T
#AC_TYPE_UINT8_T

# Checks for library functions.
#AC_FUNC_ERROR_AT_LINE
#AC_FUNC_FORK
#AC_FUNC_FSEEKO
#AC_FUNC_MALLOC
#AC_FUNC_REALLOC
#AC_FUNC_STRNLEN
#AC_FUNC_STRTOD
#AC_CHECK_FUNCS([gethostbyname gettimeofday inet_ntoa memmove memset mkdir mkfifo pow select setenv setlocale socket sqrt strcasecmp strchr strdup strerror strncasecmp strndup strstr strtol])

if test "x$with_skinny" != xno ; then
	AC_DEFINE([ENABLE_SKINNY], [1], [Define if need Skinny protocol])
	ENABLE_SKINNY_T=yes
else
	ENABLE_SKINNY_T=no
fi

if test "x$with_tar" != xno ; then
	AC_DEFINE([ENABLE_TAR], [1], [Define if need tar writing])
	ENABLE_TAR_T=yes
else
	ENABLE_TAR_T=no
fi

if test "x$with_fraud" != xno ; then
	AC_DEFINE([ENABLE_FRAUD], [1], [Define if need fraud detection])
	ENABLE_FRAUD_T=yes
else
	ENABLE_FRAUD_T=no
fi

if test "x$with_spool" != xno ; then
	AC_DEFINE([ENABLE_SPOOL], [1], [Define if need spool directory support])
	ENABLE_SPOOL_T=yes
else
	ENABLE_SPOOL_T=no
fi

if test "x$with_manager" != xno ; then
	AC_DEFINE([ENABLE_MANAGER], [1], [Define if you need manager support])
	ENABLE_MANAGER_T=yes
else
	ENABLE_MANAGER_T=no
fi

if test "x$with_heapsafe" != xno ; then
	AC_DEFINE([ENABLE_HEAPSAFE], [1], [Define if you need safe heap checking support])
	ENABLE_HEAPSAFE_T=yes
else
	ENABLE_HEAPSAFE_T=no
fi

AC_CONFIG_FILES([Makefile
                 simpleini/Makefile])


AC_OUTPUT


AC_MSG_NOTICE([

##############################################################
                                                            
 __     __   ___ ____                        _ _             
 \ \   / /__|_ _|  _ \ _ __ ___   ___  _ __ (_) |_ ___  _ __ 
  \ \ / / _ \| || |_) | '_ ` _ \ / _ \| '_ \| | __/ _ \| '__|
   \ V / (_) | ||  __/| | | | | | (_) | | | | | || (_) | |   
    \_/ \___/___|_|   |_| |_| |_|\___/|_| |_|_|\__\___/|_|   
                                                             
 
                                                             

lzma compression enabled               : $HAVE_LIBLZMA_T
ssh library enabled (cloud)            : $HAVE_LIBSSH_T
tcmalloc (faster *alloc) lib found     : $TCMALLOC_T
odbc enabled                           : $HAVE_LIBODBC_T
MySQL enabled                          : $ENABLE_MYSQL_T
oggvorbis enabled                      : $HAVE_LIBOGGVORBIS_T
snappy enabled                         : $HAVE_LIBSNAPPY_T
rrd enabled                            : $HAVE_LIBRRD_T
SIP TLS decoding enabled               : $HAVE_SIPTLS_T
Skinny decoding enabled                : $ENABLE_SKINNY_T
tar writing enabled                    : $ENABLE_TAR_T
fraud detection enabled                : $ENABLE_FRAUD_T
spool directory support enabled        : $ENABLE_SPOOL_T
manager enabled                        : $ENABLE_MANAGER_T
heap checking enabled                  : $ENABLE_HEAPSAFE_T

shared binary: run make 
static binary: run make static

check README.*

#############################################################

])

